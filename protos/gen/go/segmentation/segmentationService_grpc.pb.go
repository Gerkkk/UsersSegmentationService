// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: segmentation/segmentationService.proto

package segv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Segmentation_CreateSegment_FullMethodName     = "/segmentation.v1.Segmentation/CreateSegment"
	Segmentation_UpdateSegment_FullMethodName     = "/segmentation.v1.Segmentation/UpdateSegment"
	Segmentation_DeleteSegment_FullMethodName     = "/segmentation.v1.Segmentation/DeleteSegment"
	Segmentation_GetUserSegments_FullMethodName   = "/segmentation.v1.Segmentation/GetUserSegments"
	Segmentation_GetSegmentInfo_FullMethodName    = "/segmentation.v1.Segmentation/GetSegmentInfo"
	Segmentation_DistributeSegment_FullMethodName = "/segmentation.v1.Segmentation/DistributeSegment"
)

// SegmentationClient is the client API for Segmentation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SegmentationClient interface {
	CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*CreateSegmentResponse, error)
	UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*UpdateSegmentResponse, error)
	DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*DeleteSegmentResponse, error)
	GetUserSegments(ctx context.Context, in *GetUserSegmentsRequest, opts ...grpc.CallOption) (*GetUserSegmentsResponse, error)
	GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error)
	DistributeSegment(ctx context.Context, in *DistributeSegmentRequest, opts ...grpc.CallOption) (*DistributeSegmentResponse, error)
}

type segmentationClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentationClient(cc grpc.ClientConnInterface) SegmentationClient {
	return &segmentationClient{cc}
}

func (c *segmentationClient) CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*CreateSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSegmentResponse)
	err := c.cc.Invoke(ctx, Segmentation_CreateSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationClient) UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*UpdateSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSegmentResponse)
	err := c.cc.Invoke(ctx, Segmentation_UpdateSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationClient) DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*DeleteSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSegmentResponse)
	err := c.cc.Invoke(ctx, Segmentation_DeleteSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationClient) GetUserSegments(ctx context.Context, in *GetUserSegmentsRequest, opts ...grpc.CallOption) (*GetUserSegmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSegmentsResponse)
	err := c.cc.Invoke(ctx, Segmentation_GetUserSegments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationClient) GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSegmentInfoResponse)
	err := c.cc.Invoke(ctx, Segmentation_GetSegmentInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationClient) DistributeSegment(ctx context.Context, in *DistributeSegmentRequest, opts ...grpc.CallOption) (*DistributeSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistributeSegmentResponse)
	err := c.cc.Invoke(ctx, Segmentation_DistributeSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentationServer is the server API for Segmentation service.
// All implementations must embed UnimplementedSegmentationServer
// for forward compatibility.
type SegmentationServer interface {
	CreateSegment(context.Context, *CreateSegmentRequest) (*CreateSegmentResponse, error)
	UpdateSegment(context.Context, *UpdateSegmentRequest) (*UpdateSegmentResponse, error)
	DeleteSegment(context.Context, *DeleteSegmentRequest) (*DeleteSegmentResponse, error)
	GetUserSegments(context.Context, *GetUserSegmentsRequest) (*GetUserSegmentsResponse, error)
	GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error)
	DistributeSegment(context.Context, *DistributeSegmentRequest) (*DistributeSegmentResponse, error)
	mustEmbedUnimplementedSegmentationServer()
}

// UnimplementedSegmentationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSegmentationServer struct{}

func (UnimplementedSegmentationServer) CreateSegment(context.Context, *CreateSegmentRequest) (*CreateSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSegment not implemented")
}
func (UnimplementedSegmentationServer) UpdateSegment(context.Context, *UpdateSegmentRequest) (*UpdateSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegment not implemented")
}
func (UnimplementedSegmentationServer) DeleteSegment(context.Context, *DeleteSegmentRequest) (*DeleteSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSegment not implemented")
}
func (UnimplementedSegmentationServer) GetUserSegments(context.Context, *GetUserSegmentsRequest) (*GetUserSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSegments not implemented")
}
func (UnimplementedSegmentationServer) GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}
func (UnimplementedSegmentationServer) DistributeSegment(context.Context, *DistributeSegmentRequest) (*DistributeSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeSegment not implemented")
}
func (UnimplementedSegmentationServer) mustEmbedUnimplementedSegmentationServer() {}
func (UnimplementedSegmentationServer) testEmbeddedByValue()                      {}

// UnsafeSegmentationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SegmentationServer will
// result in compilation errors.
type UnsafeSegmentationServer interface {
	mustEmbedUnimplementedSegmentationServer()
}

func RegisterSegmentationServer(s grpc.ServiceRegistrar, srv SegmentationServer) {
	// If the following call pancis, it indicates UnimplementedSegmentationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Segmentation_ServiceDesc, srv)
}

func _Segmentation_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Segmentation_CreateSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationServer).CreateSegment(ctx, req.(*CreateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Segmentation_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Segmentation_UpdateSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationServer).UpdateSegment(ctx, req.(*UpdateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Segmentation_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Segmentation_DeleteSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationServer).DeleteSegment(ctx, req.(*DeleteSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Segmentation_GetUserSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationServer).GetUserSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Segmentation_GetUserSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationServer).GetUserSegments(ctx, req.(*GetUserSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Segmentation_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Segmentation_GetSegmentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationServer).GetSegmentInfo(ctx, req.(*GetSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Segmentation_DistributeSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationServer).DistributeSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Segmentation_DistributeSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationServer).DistributeSegment(ctx, req.(*DistributeSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Segmentation_ServiceDesc is the grpc.ServiceDesc for Segmentation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Segmentation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "segmentation.v1.Segmentation",
	HandlerType: (*SegmentationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSegment",
			Handler:    _Segmentation_CreateSegment_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _Segmentation_UpdateSegment_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _Segmentation_DeleteSegment_Handler,
		},
		{
			MethodName: "GetUserSegments",
			Handler:    _Segmentation_GetUserSegments_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _Segmentation_GetSegmentInfo_Handler,
		},
		{
			MethodName: "DistributeSegment",
			Handler:    _Segmentation_DistributeSegment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "segmentation/segmentationService.proto",
}
